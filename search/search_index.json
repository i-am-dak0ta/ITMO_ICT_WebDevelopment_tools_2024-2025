{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432 \u0410\u0440\u0442\u0443\u0440 K3340 WEB 2.2","text":""},{"location":"labs/lr-1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":""},{"location":"labs/lr-1/#_1","title":"\u0426\u0435\u043b\u0438","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.</p>"},{"location":"labs/lr-1/#_2","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"labs/lr-1/#_3","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438\"","text":""},{"location":"labs/lr-1/#_4","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 8 \u0442\u0430\u0431\u043b\u0438\u0446: 1. Users - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438. 2. TransactionTypes - \u0442\u0438\u043f\u044b \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439. 3. Categories - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439. 4. Budgets - \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 5. Notifications - \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f. 6. Tags - \u0442\u0435\u0433\u0438 \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439. 7. Transactions - \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p> <p>\u0421\u0432\u044f\u0437\u0438: - One-to-Many: <code>Users</code> \u2192 <code>Transactions</code>, <code>Users</code> \u2192 <code>Budgets</code>, <code>Users</code> \u2192 <code>Notifications</code>. - Many-to-Many: <code>Transactions</code> \u2194 <code>Tags</code> \u0447\u0435\u0440\u0435\u0437 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>TransactionTags</code>. - \u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c: <code>TransactionTags</code>.</p>"},{"location":"labs/lr-1/#_5","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043e\u0434\u0430","text":""},{"location":"labs/lr-1/#connectionpy","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (<code>connection.py</code>)","text":"<p>\u0424\u0430\u0439\u043b \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439, \u0442\u0438\u043f\u043e\u0432 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u0442\u0435\u0433\u043e\u0432:</p> <pre><code>import os  \nfrom dotenv import load_dotenv  \nfrom sqlmodel import SQLModel, Session, create_engine, select  \n\nfrom models import Categories, Tags, TransactionTypeEnums, TransactionTypes  \n\nload_dotenv()  \ndb_url = os.getenv(\"DB_ADMIN\")  \nengine = create_engine(db_url, echo = True)  \nDEFAULT_TAGS = [\"impulse_buy\", \"planned_buy\", \"cash\", \"card\"]  \nDEFAULT_TRANSACTION_TYPES = [\"income\", \"expense\"]  \nDEFAULT_CATEGORIES = {  \n    \"expense\": [  \n        {\"name\": \"groceries\"},  \n        {\"name\": \"transport\"},  \n        {\"name\": \"housing\"},  \n        {\"name\": \"health\"},  \n        {\"name\": \"entertainment\"},  \n        {\"name\": \"other_expenses\"},  \n    ],  \n    \"income\": [  \n        {\"name\": \"salary\"},  \n        {\"name\": \"investments\"},  \n    ],  \n}  \n\n\ndef init_db():  \n    SQLModel.metadata.create_all(engine)  \n    init_default_tags()  \n    init_default_transaction_types()  \n    init_default_categories()  \n\n\ndef init_default_tags():  \n    with Session(engine) as session:  \n        for tag_name in DEFAULT_TAGS:  \n            tag_exists = session.exec(select(Tags).where(Tags.name == tag_name)).first()  \n            if not tag_exists:  \n                session.add(Tags(name = tag_name))  \n        session.commit()  \n\n\ndef init_default_transaction_types():  \n    with Session(engine) as session:  \n        for tt_name in DEFAULT_TRANSACTION_TYPES:  \n            type_exists = session.exec(  \n                select(TransactionTypes).where(TransactionTypes.name == tt_name)  \n            ).first()  \n            if not type_exists:  \n                session.add(TransactionTypes(name=tt_name))  \n        session.commit()  \n\n\ndef init_default_categories():  \n    with Session(engine) as session:  \n        for tx_type_str, categories in DEFAULT_CATEGORIES.items():  \n            tx_type = session.exec(  \n                select(TransactionTypes).where(TransactionTypes.name == TransactionTypeEnums(tx_type_str))  \n            ).first()  \n\n            if not tx_type:  \n                continue  \n\n            for category in categories:  \n                exists = session.exec(  \n                    select(Categories).where(  \n                        Categories.name == category[\"name\"],  \n                        Categories.transaction_type_id == tx_type.transaction_type_id  \n                    )  \n                ).first()  \n\n                if not exists:  \n                    session.add(  \n                        Categories(  \n                            name = category[\"name\"],  \n                            transaction_type_id = tx_type.transaction_type_id  \n                        )  \n                    )  \n\n        session.commit()  \n\n\ndef get_session():  \n    with Session(engine) as session:  \n        yield session\n</code></pre>"},{"location":"labs/lr-1/#mainpy","title":"\u0413\u043b\u0430\u0432\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (<code>main.py</code>)","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435:</p> <pre><code>from fastapi import FastAPI  \n\nfrom connection import init_db  \nfrom routers import auth, budgets, categories, notifications, tags, transactions, users  \n\napp = FastAPI()  \n\n\n@app.on_event(\"startup\")  \ndef on_startup():  \n    init_db()  \n\n\napp.include_router(auth.router)  \napp.include_router(budgets.router)  \napp.include_router(categories.router)  \napp.include_router(notifications.router)  \napp.include_router(tags.router)  \napp.include_router(transactions.router)  \napp.include_router(users.router)  \n\n\n@app.get(\"/\")  \ndef hello():  \n    return \"Hello, Artur!\"\n</code></pre>"},{"location":"labs/lr-1/#modelspy","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (<code>models.py</code>)","text":"<p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0441\u0432\u044f\u0437\u0435\u0439:</p> <pre><code>from typing import Optional, List  \nfrom sqlmodel import SQLModel, Field, Relationship  \nfrom datetime import datetime  \nfrom enum import Enum  \n\n\nclass Users(SQLModel, table = True):  \n    user_id: Optional[int] = Field(default = None, primary_key = True)  \n    username: str = Field(index = True, unique = True)  \n    password: str  \n    first_name: str  \n    last_name: str  \n    email: str = Field(unique = True, index = True)  \n\n    transactions: List[\"Transactions\"] = Relationship(back_populates = \"user\")  \n    budgets: List[\"Budgets\"] = Relationship(back_populates = \"user\")  \n    notifications: List[\"Notifications\"] = Relationship(back_populates = \"user\")  \n\n\nclass TransactionTypeEnums(str, Enum):  \n    income = \"income\"  \n    expense = \"expense\"  \n\n\nclass TransactionTypes(SQLModel, table = True):  \n    transaction_type_id: Optional[int] = Field(default = None, primary_key = True)  \n    name: TransactionTypeEnums  \n\n    transactions: List[\"Transactions\"] = Relationship(back_populates = \"transaction_type\")  \n    categories: List[\"Categories\"] = Relationship(back_populates = \"transaction_type\")  \n\n\nclass Categories(SQLModel, table = True):  \n    category_id: Optional[int] = Field(default = None, primary_key = True)  \n    transaction_type_id: Optional[int] = Field(default = None, foreign_key = \"transactiontypes.transaction_type_id\")  \n    name: str  \n\n    transactions: List[\"Transactions\"] = Relationship(back_populates = \"category\")  \n    budgets: List[\"Budgets\"] = Relationship(back_populates = \"category\")  \n    transaction_type: Optional[\"TransactionTypes\"] = Relationship(back_populates = \"categories\")  \n\n\nclass Budgets(SQLModel, table = True):  \n    budget_id: Optional[int] = Field(default = None, primary_key = True)  \n    user_id: Optional[int] = Field(foreign_key = \"users.user_id\")  \n    category_id: Optional[int] = Field(foreign_key = \"categories.category_id\")  \n    limit_amount: float  \n    start_date: datetime  \n    end_date: datetime  \n    description: Optional[str] = None  \n    total_spent: float = Field(default = 0.0)  \n\n    user: Optional[\"Users\"] = Relationship(back_populates = \"budgets\")  \n    category: Optional[\"Categories\"] = Relationship(back_populates = \"budgets\")  \n    notifications: List[\"Notifications\"] = Relationship(back_populates = \"budget\")  \n\n\nclass Notifications(SQLModel, table = True):  \n    notification_id: Optional[int] = Field(default = None, primary_key = True)  \n    user_id: Optional[int] = Field(foreign_key = \"users.user_id\")  \n    budget_id: Optional[int] = Field(foreign_key = \"budgets.budget_id\")  \n    message: str  \n    created_at: datetime = Field(default_factory = datetime.utcnow)  \n    is_read: bool = Field(default = False)  \n\n    user: Optional[\"Users\"] = Relationship(back_populates = \"notifications\")  \n    budget: Optional[\"Budgets\"] = Relationship(back_populates = \"notifications\")  \n\n\nclass TransactionTags(SQLModel, table = True):  \n    transaction_tag_id: Optional[int] = Field(default = None, primary_key = True)  \n    tag_id: Optional[int] = Field(foreign_key = \"tags.tag_id\")  \n    transaction_id: Optional[int] = Field(foreign_key = \"transactions.transaction_id\")  \n    created_at: datetime = Field(default_factory = datetime.utcnow)  \n\n\nclass Tags(SQLModel, table = True):  \n    tag_id: Optional[int] = Field(default = None, primary_key = True)  \n    name: str  \n\n    transactions: List[\"Transactions\"] = Relationship(back_populates = \"tags\", link_model = TransactionTags)  \n\n\nclass Transactions(SQLModel, table = True):  \n    transaction_id: Optional[int] = Field(default = None, primary_key = True)  \n    user_id: Optional[int] = Field(foreign_key = \"users.user_id\")  \n    transaction_type_id: Optional[int] = Field(foreign_key = \"transactiontypes.transaction_type_id\")  \n    category_id: Optional[int] = Field(foreign_key = \"categories.category_id\")  \n    amount: float  \n    date: datetime  \n    description: Optional[str] = None  \n\n    user: Optional[\"Users\"] = Relationship(back_populates = \"transactions\")  \n    transaction_type: Optional[\"TransactionTypes\"] = Relationship(back_populates = \"transactions\")  \n    category: Optional[\"Categories\"] = Relationship(back_populates = \"transactions\")  \n    tags: List[\"Tags\"] = Relationship(back_populates = \"transactions\", link_model = TransactionTags)\n</code></pre>"},{"location":"labs/lr-1/#pydantic-schemaspy","title":"\u0421\u0445\u0435\u043c\u044b Pydantic (<code>schemas.py</code>)","text":"<p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>from pydantic import BaseModel, EmailStr, field_validator, validator\nfrom typing import Optional, List\nfrom datetime import datetime\n\nfrom pydantic_core.core_schema import ValidationInfo\n\n\nclass UserBase(BaseModel):\n    username: str\n    first_name: str\n    last_name: str\n    email: EmailStr\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass UserRead(UserBase):\n    user_id: int\n\n    class Config:\n        from_attributes = True\n\n\nclass UserWithToken(BaseModel):\n    user: UserRead\n    access_token: str\n    token_type: str = \"bearer\"\n\n\nclass UserUpdate(BaseModel):\n    first_name: Optional[str]\n    last_name: Optional[str]\n    email: Optional[EmailStr]\n\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\n\nclass UserPassword(BaseModel):\n    old_password: str\n    new_password: str\n\n\nclass TransactionBase(BaseModel):\n    amount: float\n    date: datetime\n    description: Optional[str] = None\n\n\nclass TransactionCreate(TransactionBase):\n    transaction_type_id: int\n    category_id: int\n    tag_ids: Optional[List[int]] = []\n\n    @field_validator('amount')\n    def amount_must_be_positive(cls, amount: float):\n        if amount &lt;= 0:\n            raise ValueError('Amount must be positive')\n        return amount\n\n\nclass TransactionUpdate(BaseModel):\n    transaction_type_id: Optional[int]\n    category_id: Optional[int]\n    amount: Optional[float]\n    date: Optional[datetime]\n    description: Optional[str] = None\n    tag_ids: Optional[List[int]]\n\n    @field_validator('amount')\n    def amount_must_be_positive(cls, amount: Optional[float]):\n        if amount is not None and amount &lt;= 0:\n            raise ValueError('Amount must be positive')\n        return amount\n\n\nclass TransactionRead(TransactionBase):\n    transaction_id: int\n    user_id: int\n    transaction_type_id: int\n    category_id: int\n    tags: List['TagRead'] = []\n\n    class Config:\n        from_attributes = True\n\n\nclass BudgetBase(BaseModel):\n    limit_amount: float\n    start_date: datetime\n    end_date: datetime\n    description: Optional[str] = None\n\n\nclass BudgetCreate(BudgetBase):\n    category_id: int\n\n    @field_validator('limit_amount')\n    def limit_amount_must_be_positive(cls, limit_amount: float):\n        if limit_amount &lt;= 0:\n            raise ValueError('Limit amount must be positive')\n        return limit_amount\n\n    @field_validator('end_date')\n    def check_dates(cls, end_date: datetime, info: ValidationInfo):\n        start_date = info.data.get('start_date')  # type: ignore\n        if start_date and end_date &lt;= start_date:\n            raise ValueError('End date must be after start date')\n        return end_date\n\n\nclass BudgetUpdate(BaseModel):\n    category_id: Optional[int]\n    limit_amount: Optional[float]\n    start_date: Optional[datetime]\n    end_date: Optional[datetime]\n    description: Optional[str] = None\n\n    @field_validator('limit_amount')\n    def limit_amount_must_be_positive(cls, limit_amount: Optional[float]):\n        if limit_amount is not None and limit_amount &lt;= 0:\n            raise ValueError('Limit amount must be positive')\n        return limit_amount\n\n    @field_validator('end_date')\n    def check_dates(cls, end_date: datetime, info: ValidationInfo):\n        start_date = info.data.get('start_date')  # type: ignore\n        if start_date and end_date &lt;= start_date:\n            raise ValueError('End date must be after start date')\n        return end_date\n\n\nclass BudgetRead(BudgetBase):\n    budget_id: int\n    user_id: int\n    category_id: int\n    total_spent: float\n\n    class Config:\n        from_attributes = True\n\n\nclass NotificationRead(BaseModel):\n    notification_id: int\n    user_id: int\n    budget_id: int\n    message: str\n    created_at: datetime\n    is_read: bool\n\n    class Config:\n        from_attributes = True\n\n\nclass CategoryBase(BaseModel):\n    name: str\n\n\nclass CategoryRead(CategoryBase):\n    category_id: int\n    transaction_type_id: int\n\n    class Config:\n        from_attributes = True\n\n\nclass TagBase(BaseModel):\n    name: str\n\n\nclass TagRead(TagBase):\n    tag_id: int\n\n    class Config:\n        from_attributes = True\n\n\nclass TransactionTagRead(BaseModel):\n    transaction_tag_id: int\n    tag_id: int\n    transaction_id: int\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n</code></pre>"},{"location":"labs/lr-1/#routersauthpy","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 (<code>routers/auth.py</code>)","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043b\u043e\u0433\u0438\u043d\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u043c:</p> <pre><code>import datetime\nimport os\nimport jwt\nfrom fastapi import APIRouter, HTTPException, Depends, Security, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlmodel import Session, select\nfrom passlib.context import CryptContext\nfrom connection import get_session\nfrom models import Users\nfrom schemas import UserCreate, UserRead, UserLogin, UserPassword, UserWithToken\n\nrouter = APIRouter(prefix = \"/auth\", tags = [\"Authentication\"])\n\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\nALGORITHM = os.getenv(\"ALGORITHM\")\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\npwd_context = CryptContext(schemes = [\"bcrypt\"], deprecated = \"auto\")\nauth_scheme = HTTPBearer()\n\n\ndef create_access_token(data: dict, expires_delta: datetime.timedelta = None) -&gt; str:\n    payload = data.copy()\n    if expires_delta:\n        expire = datetime.datetime.now(datetime.timezone.utc) + expires_delta\n    else:\n        expire = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(\n            minutes = ACCESS_TOKEN_EXPIRE_MINUTES\n        )\n    payload.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(payload, SECRET_KEY, algorithm = ALGORITHM)\n    return encoded_jwt\n\n\ndef verify_token(token: str) -&gt; str:\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms = [ALGORITHM])\n        return payload.get(\"sub\")\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code = status.HTTP_401_UNAUTHORIZED, detail = \"Token expired\")\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code = status.HTTP_401_UNAUTHORIZED, detail = \"Invalid token\")\n\n\ndef create_user_with_hash(user_create: UserCreate, session: Session) -&gt; Users:\n    username_statement = select(Users).where(Users.username == user_create.username)\n    existing_user = session.exec(username_statement).first()\n    if existing_user:\n        raise HTTPException(status_code = 400, detail = \"Username already registered\")\n\n    email_statement = select(Users).where(Users.email == user_create.email)\n    existing_email = session.exec(email_statement).first()\n    if existing_email:\n        raise HTTPException(status_code = 400, detail = \"Email already registered\")\n\n    hashed_password = pwd_context.hash(user_create.password)\n\n    new_user = Users(\n        username = user_create.username,\n        password = hashed_password,\n        first_name = user_create.first_name,\n        last_name = user_create.last_name,\n        email = user_create.email\n    )\n    session.add(new_user)\n    session.commit()\n    session.refresh(new_user)\n    return new_user\n\n\ndef create_user_and_token(user_create: UserCreate, session: Session) -&gt; UserWithToken:\n    user = create_user_with_hash(user_create, session)\n    token = create_access_token(data = {\"sub\": user.username})\n    return UserWithToken(user = UserRead.model_validate(user), access_token = token)\n\n\n@router.post(\"/register\", response_model = UserWithToken)\ndef register(user_create: UserCreate, session: Session = Depends(get_session)):\n    return create_user_and_token(user_create, session)\n\n\n@router.post(\"/login\", response_model = UserWithToken)\ndef login(user_login: UserLogin, session: Session = Depends(get_session)):\n    statement = select(Users).where(Users.username == user_login.username)\n    user = session.exec(statement).first()\n    if not user or not pwd_context.verify(user_login.password, user.password):\n        raise HTTPException(status_code = 401, detail = \"Invalid credentials\")\n    token = create_access_token(data = {\"sub\": user.username})\n    return {\n        \"user\": UserRead.model_validate(user),\n        \"access_token\": token,\n        \"token_type\": \"bearer\"\n    }\n\n\ndef get_current_user(\n    credentials: HTTPAuthorizationCredentials = Security(auth_scheme),\n    session: Session = Depends(get_session)\n) -&gt; Users:\n    token = credentials.credentials\n    username = verify_token(token)\n    statement = select(Users).where(Users.username == username)\n    user = session.exec(statement).first()\n    if not user: raise HTTPException(status_code = 404, detail = \"User not found\")\n    return user\n\n\n@router.get(\"/me\", response_model = UserRead)\ndef read_current_user(current_user: Users = Depends(get_current_user)):\n    return current_user\n\n\n@router.patch(\"/change-password\")\ndef change_password(\n    pwd_data: UserPassword,\n    current_user: Users = Depends(get_current_user),\n    session: Session = Depends(get_session)\n):\n    if not pwd_context.verify(pwd_data.old_password, current_user.password):\n        raise HTTPException(status_code = 400, detail = \"Incorrect current password\")\n    current_user.password = pwd_context.hash(pwd_data.new_password)\n    session.add(current_user)\n    session.commit()\n    return {\"message\": \"Password updated successfully\"}\n\n</code></pre>"},{"location":"labs/lr-1/#routersuserspy","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (<code>routers/users.py</code>)","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439:</p> <pre><code>from fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom connection import get_session\nfrom models import Users\nfrom typing import List\nfrom routers.auth import create_user_and_token\nfrom schemas import UserCreate, UserRead, UserUpdate, UserWithToken\n\nrouter = APIRouter(prefix = \"/users\", tags = [\"Users\"])\n\n\n@router.post(\"/\", response_model = UserWithToken)\ndef create_user(user_create: UserCreate, session: Session = Depends(get_session)):\n    return create_user_and_token(user_create, session)\n\n\n@router.get(\"/\", response_model = List[UserRead])\ndef read_users(session: Session = Depends(get_session)):\n    users = session.exec(select(Users)).all()\n    return users\n\n\n@router.get(\"/{user_id}\", response_model = UserRead)\ndef read_user(user_id: int, session: Session = Depends(get_session)):\n    user = session.get(Users, user_id)\n    if not user:\n        raise HTTPException(status_code = 404, detail = \"User not found\")\n    return user\n\n\n@router.patch(\"/{user_id}\", response_model = UserRead)\ndef update_user(user_id: int, user_update: UserUpdate, session: Session = Depends(get_session)):\n    user = session.get(Users, user_id)\n    if not user:\n        raise HTTPException(status_code = 404, detail = \"User not found\")\n    user_data = user_update.dict(exclude_unset = True)\n    for key, value in user_data.items():\n        setattr(user, key, value)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return user\n\n\n@router.delete(\"/{user_id}\")\ndef delete_user(user_id: int, session: Session = Depends(get_session)):\n    user = session.get(Users, user_id)\n    if not user:\n        raise HTTPException(status_code = 404, detail = \"User not found\")\n    session.delete(user)\n    session.commit()\n    return {\"message\": \"User deleted successfully\"}\n\n</code></pre>"},{"location":"labs/lr-1/#routersbudgetspy","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432 (<code>routers/budgets.py</code>)","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432 \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439:</p> <pre><code>from fastapi import APIRouter, Depends, HTTPException  \nfrom sqlalchemy import delete, func  \nfrom sqlmodel import Session, select  \nfrom connection import get_session  \nfrom models import Budgets, Categories, Notifications, TransactionTypeEnums, TransactionTypes, Transactions, Users  \nfrom schemas import BudgetCreate, BudgetRead, BudgetUpdate  \nfrom routers.auth import get_current_user  \nfrom typing import List  \n\nrouter = APIRouter(prefix = \"/budgets\", tags = [\"Budgets\"])  \n\n\n@router.post(\"/\", response_model = BudgetRead)  \ndef create_budget(  \n    budget: BudgetCreate,  \n    current_user: Users = Depends(get_current_user),  \n    session: Session = Depends(get_session)  \n):  \n    category = session.get(Categories, budget.category_id)  \n    if not category:  \n        raise HTTPException(status_code = 404, detail = \"Category not found\")  \n    if category.transaction_type.name != TransactionTypeEnums.expense:  \n        raise HTTPException(status_code = 400, detail = \"Budget can only be set for expense categories\")  \n\n    db_budget = Budgets(  \n        user_id = current_user.user_id,  \n        category_id = budget.category_id,  \n        limit_amount = budget.limit_amount,  \n        start_date = budget.start_date,  \n        end_date = budget.end_date,  \n        description = budget.description  \n    )  \n    session.add(db_budget)  \n    session.commit()  \n    session.refresh(db_budget)  \n\n    update_total_spent(  \n        category_id = budget.category_id,  \n        user_id = current_user.user_id,  \n        session = session  \n    )  \n\n    return db_budget  \n\n\n@router.get(\"/\", response_model = List[BudgetRead])  \ndef read_budgets(  \n    current_user: Users = Depends(get_current_user),  \n    session: Session = Depends(get_session)  \n):  \n    statement = select(Budgets).where(Budgets.user_id == current_user.user_id)  \n    budgets = session.exec(statement).all()  \n    return budgets  \n\n\n@router.get(\"/{budget_id}\", response_model = BudgetRead)  \ndef read_budget(  \n    budget_id: int,  \n    current_user: Users = Depends(get_current_user),  \n    session: Session = Depends(get_session)  \n):  \n    budget = session.get(Budgets, budget_id)  \n    if not budget:  \n        raise HTTPException(status_code = 404, detail = \"Budget not found\")  \n    if budget.user_id != current_user.user_id:  \n        raise HTTPException(status_code = 403, detail = \"Not authorized to view this budget\")  \n    return budget  \n\n\ndef update_total_spent(category_id: int, user_id: int, session: Session):  \n    expense_type = session.exec(  \n        select(TransactionTypes).where(TransactionTypes.name == TransactionTypeEnums.expense)  \n    ).first()  \n\n    budgets = session.exec(  \n        select(Budgets).where(  \n            Budgets.category_id == category_id,  \n            Budgets.user_id == user_id  \n        )  \n    ).all()  \n\n    for budget in budgets:  \n        total = session.exec(  \n            select(func.sum(Transactions.amount)).where(  \n                Transactions.user_id == budget.user_id,  \n                Transactions.category_id == budget.category_id,  \n                Transactions.transaction_type_id == expense_type.transaction_type_id,  \n                Transactions.date.between(budget.start_date, budget.end_date)  \n            )  \n        ).first()  \n\n        total = total if total is not None else 0.0  \n\n        budget.total_spent = total  \n        session.add(budget)  \n\n        if total &lt;= budget.limit_amount:  \n            session.exec(  \n                delete(Notifications).where(  \n                    Notifications.user_id == budget.user_id,  \n                    Notifications.budget_id == budget.budget_id  \n                )  \n            )  \n        else:  \n            exists = session.exec(  \n                select(Notifications).where(  \n                    Notifications.user_id == budget.user_id,  \n                    Notifications.budget_id == budget.budget_id  \n                )  \n            ).first()  \n            if not exists:  \n                session.add(  \n                    Notifications(  \n                        user_id = budget.user_id,  \n                        budget_id = budget.budget_id,  \n                        message = (  \n                            f\"\u0411\u044e\u0434\u0436\u0435\u0442 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u00ab{budget.category.name}\u00bb \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d: \"  \n                            f\"\u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e {total}, \u043b\u0438\u043c\u0438\u0442 {budget.limit_amount}\"  \n                        )  \n                    )  \n                )  \n    session.commit()  \n\n\n@router.patch(\"/{budget_id}\", response_model = BudgetRead)  \ndef update_budget(  \n    budget_id: int,  \n    budget_update: BudgetUpdate,  \n    current_user: Users = Depends(get_current_user),  \n    session: Session = Depends(get_session)  \n):  \n    budget = session.get(Budgets, budget_id)  \n    if not budget:  \n        raise HTTPException(status_code = 404, detail = \"Budget not found\")  \n    if budget.user_id != current_user.user_id:  \n        raise HTTPException(status_code = 403, detail = \"Not authorized to update this budget\")  \n\n    data = budget_update.dict(exclude_unset = True)  \n    if 'category_id' in data:  \n        category = session.get(Categories, data['category_id'])  \n        if not category or category.transaction_type.name != TransactionTypeEnums.expense:  \n            raise HTTPException(status_code = 400, detail = \"Invalid expense category\")  \n    for k, v in data.items():  \n        setattr(budget, k, v)  \n    session.add(budget)  \n    session.commit()  \n    session.refresh(budget)  \n\n    update_total_spent(  \n        category_id = budget.category_id,  \n        user_id = current_user.user_id,  \n        session = session  \n    )  \n    return budget  \n\n\n@router.delete(\"/{budget_id}\")  \ndef delete_budget(  \n    budget_id: int,  \n    current_user: Users = Depends(get_current_user),  \n    session: Session = Depends(get_session)  \n):  \n    budget = session.get(Budgets, budget_id)  \n    if not budget:  \n        raise HTTPException(status_code = 404, detail = \"Budget not found\")  \n    if budget.user_id != current_user.user_id:  \n        raise HTTPException(status_code = 403, detail = \"Not authorized to delete this budget\")  \n    session.delete(budget)  \n    session.commit()  \n    return {\"message\": \"Budget deleted successfully\"}\n</code></pre>"},{"location":"labs/lr-1/#_6","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:","text":"<ul> <li>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Alex Johnson \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0431\u044e\u0434\u0436\u0435\u0442 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \"groceries\" \u0441 \u043b\u0438\u043c\u0438\u0442\u043e\u043c 350. \u041f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043d\u0430 200 \u0438 250 (\u0438\u0442\u043e\u0433\u043e 450), \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 <code>total_spent</code> \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430.</li> <li>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Bob Smith \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u043c \u043d\u0430 \"housing\", \u0433\u0434\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u043d\u0430 850 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043b\u0438\u043c\u0438\u0442 1000, \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f.</li> </ul>"},{"location":"labs/lr-1/#_7","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432. \u0412\u0441\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b.</p>"},{"location":"practices/pr-1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Pydantic \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0430\u0432\u0442\u043e\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"practices/pr-1/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"practices/pr-1/#_2","title":"\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 <code>main.py</code> \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u044b: <code>temp_bd</code> \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 <code>professions</code> \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439.</p> <pre><code>professions = [  \n    {  \n        \"id\": 1,  \n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",  \n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\",  \n    }  \n]  \n\ntemp_bd = [  \n    {  \n        \"id\": 1,  \n        \"race\": \"director\",  \n        \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",  \n        \"level\": 12,  \n        \"profession\": {  \n            \"id\": 1,  \n            \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",  \n            \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"  \n        },  \n        \"skills\":  \n            [{  \n                \"id\": 1,  \n                \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",  \n                \"description\": \"\"  \n            },  \n                {  \n                    \"id\": 2,  \n                    \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",  \n                    \"description\": \"\"  \n                }]  \n    },  \n    {  \n        \"id\": 2,  \n        \"race\": \"worker\",  \n        \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",  \n        \"level\": 12,  \n        \"profession\": {  \n            \"id\": 1,  \n            \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",  \n            \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"  \n        },  \n        \"skills\": []  \n    },  \n]\n</code></pre>"},{"location":"practices/pr-1/#pydantic","title":"\u041c\u043e\u0434\u0435\u043b\u0438 Pydantic","text":"<p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>models.py</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>from enum import Enum  \nfrom typing import Optional, List  \n\nfrom pydantic import BaseModel  \n\n\nclass RaceType(Enum):  \n    director = \"director\"  \n    worker = \"worker\"  \n    junior = \"junior\"  \n\n\nclass Profession(BaseModel):  \n    id: int  \n    title: str  \n    description: str  \n\n\nclass Skill(BaseModel):  \n    id: int  \n    name: str  \n    description: str  \n\n\nclass Warrior(BaseModel):  \n    id: int  \n    race: RaceType  \n    name: str  \n    level: int  \n    profession: Profession  \n    skills: Optional[List[Skill]] = []\n</code></pre>"},{"location":"practices/pr-1/#_3","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432 \u0432 <code>main.py</code>:</p> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e\u0438\u043d\u043e\u0432:</li> </ul> <pre><code>@app.get(\"/warriors_list\")  \ndef warriors_list() -&gt; List[Warrior]:  \n    return temp_bd\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.get(\"/warrior/{warrior_id}\")  \ndef warriors_get(warrior_id: int) -&gt; List[Warrior]:  \n    return [warrior for warrior in temp_bd if warrior.get(\"id\") == warrior_id]\n</code></pre> <ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.post(\"/warrior\")  \ndef warriors_create(warrior: Warrior):  \n    warrior_to_append = warrior.model_dump()  \n    temp_bd.append(warrior_to_append)  \n    return {\"status\": 200, \"data\": warrior}\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.delete(\"/warrior/delete/{warrior_id}\")\ndef warrior_delete(warrior_id: int):\n    for i, warrior in enumerate(temp_bd):\n        if warrior.get(\"id\") == warrior_id:\n            temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.put(\"/warrior/{warrior_id}\")  \ndef warrior_update(warrior_id: int, warrior: Warrior) -&gt; List[Warrior]:  \n    for war in temp_bd:  \n        if war.get(\"id\") == warrior_id:  \n            warrior_to_append = warrior.model_dump()  \n            temp_bd.remove(war)  \n            temp_bd.append(warrior_to_append)  \n    return temp_bd\n</code></pre>"},{"location":"practices/pr-1/#_4","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439 \u0432 <code>main.py</code>:</p> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439:</li> </ul> <pre><code>@app.get(\"/professions_list\")  \ndef profession_list() -&gt; List[Profession]:  \n    return professions\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.get(\"/professions/{profession_id}\")  \ndef profession_get(profession_id: int) -&gt; List[Profession]:  \n    return [profession for profession in professions if profession.get(\"id\") == profession_id]\n</code></pre> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.post(\"/professions\")  \ndef profession_create(profession: Profession):  \n    profession_dict = profession.model_dump()  \n    professions.append(profession_dict)  \n    return {\"status\": 200, \"data\": profession}\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.delete(\"/professions/delete/{profession_id}\")  \ndef profession_delete(profession_id: int):  \n    for i, profession in enumerate(professions):  \n        if profession.get(\"id\") == profession_id:  \n            professions.pop(i)  \n            break  \n    return {\"status\": 201, \"data\": \"deleted\"}\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.put(\"/professions/{profession_id}\")  \ndef profession_update(profession_id: int, profession: Profession) -&gt; List[Profession]:  \n    for prof in professions:  \n        if prof.get(\"id\") == profession_id:  \n            profession_to_append = profession.model_dump()  \n            professions.remove(prof)  \n            professions.append(profession_to_append)  \n    return professions\n</code></pre>"},{"location":"practices/pr-1/#_5","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e FastAPI:</p> <p></p>"},{"location":"practices/pr-2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.2. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 PostgreSQL. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432, \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439, \u0443\u043c\u0435\u043d\u0438\u0439 \u0438 \u0438\u0445 \u0441\u0432\u044f\u0437\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439 \u0438 \u0443\u043c\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u043e\u0438\u043d\u0430. \u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"practices/pr-2/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"practices/pr-2/#_2","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>connection.py</code> \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a PostgreSQL:</p> <pre><code>from sqlmodel import SQLModel, Session, create_engine  \n\ndb_url = \"postgresql://postgres:123123@localhost/warriors_db\"  \nengine = create_engine(db_url, echo=True)  \n\n\ndef init_db():  \n    SQLModel.metadata.create_all(engine)  \n\n\ndef get_session():  \n    with Session(engine) as session:  \n        yield session\n</code></pre> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 <code>main.py</code> \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>@app.on_event(\"startup\")  \ndef on_startup():  \n    init_db()\n</code></pre>"},{"location":"practices/pr-2/#sqlmodel","title":"\u041c\u043e\u0434\u0435\u043b\u0438 SQLModel","text":"<p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>models.py</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0441\u0432\u044f\u0437\u0435\u0439:</p> <ul> <li>\u0412\u043e\u0438\u043d \u0438 \u043e\u0442\u0432\u0435\u0442 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438:</li> </ul> <pre><code>class WarriorDefault(SQLModel):  \n    race: RaceType  \n    name: str  \n    level: int  \n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")  \n\n\nclass Warrior(WarriorDefault, table=True):  \n    id: int = Field(default=None, primary_key=True)  \n    profession: Optional[Profession] = Relationship(  \n        back_populates=\"warriors_prof\",  \n        sa_relationship_kwargs={\"lazy\": \"joined\"},  \n    )  \n\n    skills: Optional[List[Skill]] = Relationship(  \n        back_populates=\"warriors\",  \n        link_model=SkillWarriorLink,  \n        sa_relationship_kwargs={\"uselist\": True, \"lazy\": \"selectin\"},  \n    )\n\nclass WarriorProfessions(WarriorDefault):  \n    profession: Optional[Profession] = None  \n\n\nclass WarriorResponse(WarriorProfessions):  \n    id: int  \n    skills: List[Skill]\n</code></pre> <ul> <li>\u041f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f:</li> </ul> <pre><code>class ProfessionDefault(SQLModel):  \n    title: str  \n    description: str  \n\nclass Profession(ProfessionDefault, table=True):  \n    id: int = Field(default=None, primary_key=True)  \n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\n</code></pre> <ul> <li>\u0423\u043c\u0435\u043d\u0438\u0435 \u0438 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430:</li> </ul> <pre><code>class SkillWarriorLink(SQLModel, table=True):  \n    skill_id: Optional[int] = Field(  \n        default=None, foreign_key=\"skill.id\", primary_key=True  \n    )  \n    warrior_id: Optional[int] = Field(  \n        default=None, foreign_key=\"warrior.id\", primary_key=True  \n    )  \n\n\nclass SkillDefault(SQLModel):  \n    name: str  \n    description: Optional[str] = \"\"  \n\n\nclass Skill(SkillDefault, table=True):  \n    id: int = Field(default=None, primary_key=True)  \n    warriors: Optional[List[\"Warrior\"]] = Relationship(  \n        back_populates=\"skills\",  \n        link_model=SkillWarriorLink  \n    )\n</code></pre>"},{"location":"practices/pr-2/#_3","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 <code>main.py</code>:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.post(\"/warrior\")  \ndef warriors_create(warrior: WarriorDefault, session=Depends(get_session)):  \n    warrior = Warrior.model_validate(warrior)  \n    session.add(warrior)  \n    session.commit()  \n    session.refresh(warrior)  \n    return {\"status\": 200, \"data\": warrior}\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e\u0438\u043d\u043e\u0432:</li> </ul> <pre><code>@app.get(\"/warriors_list\")  \ndef warriors_list(session=Depends(get_session)) -&gt; List[Warrior]:  \n    return session.exec(select(Warrior)).all()\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430 \u0441 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0435\u0439 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438:</li> </ul> <pre><code>@app.get(\"/warrior/{warrior_id}\", response_model=WarriorResponse)  \ndef warriors_get(warrior_id: int, session=Depends(get_session)) -&gt; Warrior:  \n    warrior = session.get(Warrior, warrior_id)  \n    return warrior\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.patch(\"/warrior/{warrior_id}\")  \ndef warrior_update(  \n        warrior_id: int, warrior: WarriorDefault, session=Depends(get_session)  \n) -&gt; WarriorDefault:  \n    db_warrior = session.get(Warrior, warrior_id)  \n    if not db_warrior:  \n        raise HTTPException(status_code=404, detail=\"Warrior not found\")  \n\n    warrior_data = warrior.model_dump(exclude_unset=True)  \n    for key, value in warrior_data.items():  \n        setattr(db_warrior, key, value)  \n\n    session.add(db_warrior)  \n    session.commit()  \n    session.refresh(db_warrior)  \n    return db_warrior\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.delete(\"/warrior/{warrior_id}\")  \ndef warrior_delete(warrior_id: int, session=Depends(get_session)):  \n    warrior = session.get(Warrior, warrior_id)  \n    if not warrior:  \n        raise HTTPException(status_code=404, detail=\"Warrior not found\")  \n    session.delete(warrior)  \n    session.commit()  \n    return {\"ok\": True}\n</code></pre>"},{"location":"practices/pr-2/#_4","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439","text":"<ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439:</li> </ul> <pre><code>@app.get(\"/professions_list\")  \ndef professions_list(session=Depends(get_session)) -&gt; List[Profession]:  \n    return session.exec(select(Profession)).all()\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.get(\"/profession/{profession_id}\")  \ndef profession_get(profession_id: int, session=Depends(get_session)) -&gt; Profession:  \n    return session.get(Profession, profession_id)\n</code></pre> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.post(\"/profession\")  \ndef profession_create(prof: ProfessionDefault, session=Depends(get_session)):  \n    prof = Profession.model_validate(prof)  \n    session.add(prof)  \n    session.commit()  \n    session.refresh(prof)  \n    return {\"status\": 200, \"data\": prof}\n</code></pre>"},{"location":"practices/pr-2/#_5","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u0438\u0439","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u0445 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a \u0432\u043e\u0438\u043d\u0430\u043c:</p> <ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u044f:</li> </ul> <pre><code>@app.post(\"/skill\")  \ndef skills_create(skill: SkillDefault, session=Depends(get_session)):  \n    skill = Skill.model_validate(skill)  \n    session.add(skill)  \n    session.commit()  \n    session.refresh(skill)  \n    return {\"status\": 200, \"data\": skill}\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u043c\u0435\u043d\u0438\u0439:</li> </ul> <pre><code>@app.get(\"/skills_list\")  \ndef skills_list(session=Depends(get_session)) -&gt; List[Skill]:  \n    return session.exec(select(Skill)).all()\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u044f:</li> </ul> <pre><code>@app.patch(\"/skill/{skill_id}\")  \ndef skill_update(  \n        skill_id: int, skill: SkillDefault, session=Depends(get_session)  \n) -&gt; SkillDefault:  \n    db_skill = session.get(Skill, skill_id)  \n    if not db_skill:  \n        raise HTTPException(status_code=404, detail=\"Skill not found\")  \n\n    skill_data = skill.model_dump(exclude_unset=True)  \n    for key, value in skill_data.items():  \n        setattr(db_skill, key, value)  \n\n    session.add(db_skill)  \n    session.commit()  \n    session.refresh(db_skill)  \n    return db_skill\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u044f:</li> </ul> <pre><code>@app.delete(\"/skill/{skill_id}\")  \ndef skill_delete(skill_id: int, session=Depends(get_session)):  \n    skill = session.get(Skill, skill_id)  \n    if not skill:  \n        raise HTTPException(status_code=404, detail=\"Skill not found\")  \n    session.delete(skill)  \n    session.commit()  \n    return {\"ok\": True}\n</code></pre> <ul> <li>\u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0443\u043c\u0435\u043d\u0438\u044f \u043a \u0432\u043e\u0438\u043d\u0443:</li> </ul> <pre><code>@app.post(\"/skill_warriors\")  \ndef warrior_skill_add(skill_warrior: SkillWarriorLink, session=Depends(get_session)):  \n    skill = session.get(Skill, skill_warrior.skill_id)  \n    if not skill:  \n        raise HTTPException(status_code=404, detail=\"Skill not found\")  \n\n    warrior = session.get(Warrior, skill_warrior.warrior_id)  \n    if not warrior:  \n        raise HTTPException(status_code=404, detail=\"Warrior not found\")  \n\n    if skill not in warrior.skills:  \n        session.add(skill_warrior)  \n        session.commit()  \n\n    return {\"ok\": True}\n</code></pre>"},{"location":"practices/pr-2/#_6","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e FastAPI. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u0430:</p> <p></p> <p></p>"},{"location":"practices/pr-3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.3. \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Alembic \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL. \u0414\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 <code>.env</code>, \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u043b \u0438\u0445 \u0438\u0437 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>.gitignore</code> \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f <code>level</code> \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>SkillWarriorLink</code>. \u0412\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"practices/pr-3/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"practices/pr-3/#alembic","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 Alembic","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b Alembic \u0438 \u0441\u043e\u0437\u0434\u0430\u043b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439:</li> </ol> <pre><code>pip install alembic\nalembic init migrations\n</code></pre> <ol> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>alembic.ini</code> \u0443\u043a\u0430\u0437\u0430\u043b URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</li> </ol> <pre><code>sqlalchemy.url = ${DB_ADMIN}\n</code></pre> <ol> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>migrations/env.py</code> \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043b \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b <code>target_metadata</code>:</li> </ol> <pre><code>from models import *\ntarget_metadata = SQLModel.metadata\n</code></pre> <ol> <li>\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u043e\u043b\u0435 <code>level</code> \u0432 \u043c\u043e\u0434\u0435\u043b\u044c <code>SkillWarriorLink</code> \u0432 <code>models.py</code>:</li> </ol> <pre><code>class SkillWarriorLink(SQLModel, table=True):\n   skill_id: Optional[int] = Field(default=None, foreign_key=\"skill.id\", primary_key=True)\n   warrior_id: Optional[int] = Field(default=None, foreign_key=\"warrior.id\", primary_key=True)\n   level: int | None\n</code></pre> <ol> <li>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e:</li> </ol> <pre><code>alembic revision --autogenerate -m \"skill added\"\nalembic upgrade head\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 <code>migrations/versions/581f1991df9d_skill_added.py</code>:</p> <pre><code>def upgrade() -&gt; None:  \n    \"\"\"Upgrade schema.\"\"\"  \n    # ### commands auto generated by Alembic - please adjust! ###  \n    op.add_column('skillwarriorlink', sa.Column('level', sa.Integer(), nullable=True))  \n    # ### end Alembic commands ###  \n\n\ndef downgrade() -&gt; None:  \n    \"\"\"Downgrade schema.\"\"\"  \n    # ### commands auto generated by Alembic - please adjust! ###  \n    op.drop_column('skillwarriorlink', 'level')  \n    # ### end Alembic commands ###\n</code></pre>"},{"location":"practices/pr-3/#env","title":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f (.env)","text":"<p>\u0412 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043b \u0444\u0430\u0439\u043b <code>.env</code> \u0441 URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>DB_ADMIN=postgresql://postgres:123123@localhost/warriors_db\n</code></pre> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u043b <code>connection.py</code> \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>import os\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine  \n\nload_dotenv()\ndb_url = os.getenv('DB_ADMIN')\nengine = create_engine(db_url, echo=True)  \n\ndef init_db():  \n    SQLModel.metadata.create_all(engine)  \n\ndef get_session():  \n    with Session(engine) as session:  \n        yield session\n</code></pre>"},{"location":"practices/pr-3/#git-gitignore","title":"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 Git (.gitignore)","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043b \u0444\u0430\u0439\u043b <code>.gitignore</code> \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c <code>.env</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b:</p> <pre><code>.idea  \n.ipynb_checkpoints  \n.mypy_cache  \n.vscode  \n__pycache__  \n.pytest_cache  \nhtmlcov  \ndist  \nsite  \n.coverage  \ncoverage.xml  \n.netlify  \ntest.db  \nlog.txt  \nPipfile.lock  \nenv3.*  \nenv  \nenv.py  \ndocs_build  \nsite_build  \nvenv  \ndocs.zip  \narchive.zip  \n\n# vim temporary files  \n*~  \n.*.sw?  \n.cache  \n\n# macOS  \n.DS_Store\n</code></pre>"},{"location":"practices/pr-3/#_2","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0430, \u043f\u043e\u043b\u0435 <code>level</code> \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>SkillWarriorLink</code>.</p> <p></p>"}]}